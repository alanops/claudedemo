name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_IMAGE: myapp
  NODE_VERSION: '18'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./jenkins-to-github-demo/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./jenkins-to-github-demo
      
    - name: Build application
      run: npm run build
      working-directory: ./jenkins-to-github-demo
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: ./jenkins-to-github-demo/dist/
        retention-days: 1

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./jenkins-to-github-demo/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm test
      working-directory: ./jenkins-to-github-demo
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ./jenkins-to-github-demo/test-results.xml
        retention-days: 30
        
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Unit Tests
        path: ./jenkins-to-github-demo/test-results.xml
        reporter: java-junit

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./jenkins-to-github-demo/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./jenkins-to-github-demo
      
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, sonarqube]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-version: ${{ steps.meta.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value={{sha}},enable=${{ github.event_name == 'push' }}
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./jenkins-to-github-demo
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.myapp.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ${HOME}/.kube/config
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f jenkins-to-github-demo/k8s/staging/
        kubectl set image deployment/myapp myapp=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }} -n staging
        kubectl rollout status deployment/myapp -n staging
        
    - name: Verify deployment
      run: |
        kubectl get pods -n staging
        kubectl get services -n staging

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build, test, sonarqube, docker, deploy-staging]
    if: failure()
    
    steps:
    - name: Create failure issue
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Build Failed: ${context.workflow} - Run #${context.runNumber}`,
            body: `## Build Failure Report
            
            **Workflow:** ${context.workflow}
            **Run:** [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            **Branch:** ${context.ref}
            **Commit:** ${context.sha}
            **Actor:** @${context.actor}
            
            Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
            labels: ['build-failure', 'automated']
          })
    
    - name: Send failure notification (optional)
      if: env.EMAIL_CONFIGURED == 'true'
      uses: dawidd6/action-send-mail@v6
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'Build Failed: ${{ github.repository }} - ${{ github.run_number }}'
        body: |
          Build failed for ${{ github.repository }}.
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        to: ${{ secrets.EMAIL_TO }}
        from: GitHub Actions
      env:
        EMAIL_CONFIGURED: ${{ secrets.EMAIL_USERNAME != '' && secrets.EMAIL_PASSWORD != '' && secrets.EMAIL_TO != '' }}